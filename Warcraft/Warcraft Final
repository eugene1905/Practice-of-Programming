#include <iostream>
#include <cstring>
#include <iomanip>
#include <algorithm>
using namespace std;
//***Info to initialize***///
string monster_name[5] = {"dragon", "ninja", "iceman", "lion", "wolf"};
int monster_red_order[5] = {2, 3, 4, 1, 0};
int monster_blue_order[5] = {3, 0, 1, 2, 4};
int monster_hp[5]; //Standard hp of dragon, ninja, iceman, lion, wolf
int monster_ad[5];
string weapon_list[3] = {"sword", "bomb", "arrow"};
int lionDecrease = 0;
int arrowDamage = 0;

//***File transfer***//
int t, N;
bool redReach, redTaken, blueReach, blueTaken;
void printTime(){
	cout << setw(3) << setfill('0') << t / 60 << ":";
	cout << setw(2) << setfill('0') << t % 60 << " ";
}

//***Weapon Class***//
class Weapon{
	public:
		int id;
		int damage;
		int durability;
};
class sword : public Weapon{
	public:
		sword(int ad)
		{
			damage = ad * 2 / 10;
			id = 0;
		}
};
class bomb : public Weapon{
	public:
		bomb()
		{
			id = 1;
			durability = 1;
		}
};
class arrow : public Weapon{
	public:
	arrow()
	{
		id = 2;
		durability = 3;
		damage = arrowDamage;
	}
};

//***Monster Class***//
class Monster{
	public:
		//***Basic Info***//
		bool isAlive;
		string name;
		string colour;
		string info;
		int id;
		int hp;
		int ad;

		//***City Detail***//
		int current_position;

		//***Additional stat***//
		double morale;  // for dragon
		int loyalty; // for lion
		int step;	// for iceman

		//***Weapon Detail***//
		int total_weapon;
		Weapon *Arrow;
		Weapon *Bomb;
		Weapon *Sword;

		virtual void spawnMob(int a, int b, int c) = 0;
		//***Actions for every monster***//
		void spawnWeapon(int total_weapon, int weapon_id){
			switch (weapon_id)
			{
			case 0:
				Sword = new sword(ad);
				if(Sword->damage <= 0)Sword = nullptr;
				break;
			case 1:
				Bomb = new bomb();
				break;
			case 2:
				Arrow = new arrow();
				break;
			}
		}
		void moveForward(){
			if (colour == "blue")
				current_position--;
			else
				current_position++;
			if (name == "iceman")
			{
				step++;
				if (step == 2)
				{
					ad += 20;
					hp -= 9;
					step = 0;
				}
				if (hp <= 0)
					hp = 1;
			}
			if (colour == "red")
			{
				if (current_position == N + 1)
				{
					if (blueReach)
						blueTaken = true;
					blueReach = true;
					printTime();
					cout << info << " reached blue headquarter";
					cout << " with " << hp << " elements and force " << ad << endl;
					if (blueTaken)
					{
						printTime();
						cout << "blue headquarter was taken" << endl;
					}
					return;
				}
			}

			else
			{
				if (current_position == 0)
				{
					if (redReach)
						redTaken = true;
					redReach = true;
					printTime();
					cout << info << " reached red headquarter";
					cout << " with " << hp << " elements and force " << ad << endl;
					if (redTaken)
					{
						printTime();
						cout << "red headquarter was taken" << endl;
					}
					return;
				}
			}

			printTime();
			cout << info << " marched to city " << current_position;
			cout << " with " << hp << " elements and force " << ad << endl;
		}
		void attackArrow(Monster *a){
			a->hurted(Arrow->damage, 2);
			printTime();
			cout << info << " shot";
			if (!a->isAlive)
				cout << " and killed " << a->info;
			cout << endl;
			Arrow->durability--;
			if (Arrow->durability == 0)
				Arrow = nullptr;
		}
		void attackBomb(Monster *a){
			hp = 0;
			isAlive = false;
			a->hp = 0;
			a->isAlive = false;
			Bomb->durability--;
			Bomb = nullptr;
			printTime();
			cout << info << " used a bomb and killed " << a->info << endl;
		}
		void attackSword(Monster *a){
			if (hp <= 0|| a->hp <= 0)
				return;
			printTime();
			cout << info << " attacked " << a->info;
			cout << " in city " << current_position << " with ";
			cout << hp << " elements and force " << ad << endl;
			if (Sword != nullptr)
			{
				a->hurted(ad + Sword->damage, 0);
				Sword->damage = Sword->damage * 8 / 10;
				if (Sword->damage <= 0)
					Sword = nullptr;
			}
			else{
				a->hurted(ad,3);
			}
			
			if (a->name != "ninja" && a->hp > 0)
			{
				a->fightBack(this);
			}
		}
		void fightBack(Monster *a){
			if (hp <= 0)
				return;
			printTime();
			cout << info << " fought back against ";
			cout << a->info << " in city " << current_position << endl;
			if (Sword != nullptr)
			{
				a->hurted(ad / 2 + Sword->damage, 0);
				Sword->damage = Sword->damage * 8 / 10;
				if (Sword->damage <= 0)
					Sword = nullptr;
			}
			else{
				a->hurted(ad/2,3);
			}
		}
		void hurted(int a, int weapon_type){
			hp -= a;
			if (hp <= 0)
			{
				isAlive = false;
			}
		}

		//***Special actions***//
		void yell(){ //for Dragons
			printTime();
			cout << info << " yelled in city " << current_position << endl;
		}		
		void escape(){ //for Lions
			printTime();
			cout << info << " ran away" << endl;
			hp = 0;
			isAlive = false;
		}
		void takeWeapon(Monster *a){ //for Wolves
			if (Sword == nullptr && a->Sword != nullptr)
			{
				Sword = a->Sword;
				a->Sword = nullptr;
				total_weapon++;
			}
			if (Arrow == nullptr && a->Arrow != nullptr)
			{
				Arrow = a->Arrow;
				a->Arrow = nullptr;
				total_weapon++;
			}
			if (Bomb == nullptr && a->Bomb != nullptr)
			{
				Bomb = a->Bomb;
				a->Bomb = nullptr;
				total_weapon++;
			}
		}

		//***Print Infos***//
		void printSpawn(){
			printTime();
			cout << info << " born" << endl;
			if (name == "dragon")
				cout << fixed << setprecision(2) << "Its morale is " << morale << endl;
			if (name == "lion")
				cout << "Its loyalty is " << loyalty << endl;
		}
		void printWeaponStat(){
			printTime();
			cout << info << " has ";
			if (Arrow == nullptr && Bomb == nullptr && Sword == nullptr)
				cout << "no weapon" << endl;
			else
			{
				if (Arrow != nullptr)
					cout << "arrow(" << Arrow->durability << ")";
				if (Bomb != nullptr)
				{
					if (Arrow != nullptr)
						cout << ",";
					cout << "bomb";
				}
				if (Sword != nullptr)
				{
					if (Bomb != nullptr || Arrow != nullptr)
						cout << ",";
					cout << "sword(" << Sword->damage << ")";
				}
				cout << endl;
			}
		}
		void printDeath(){
			printTime();
			cout << info << " was killed in city " << current_position << endl;
		}

		//***Fake Battles***//
		bool simulateAttack(Monster *a){
			int myHP = hp;
			int theirHP = a->hp;
			if (Sword != nullptr){
				theirHP -= ad + Sword->damage;
			}
			else{
				theirHP -= ad;
			}
			if (theirHP > 0 && a->name != "ninja"){
				if (a->Sword != nullptr){
					myHP -= a->ad / 2 + a->Sword->damage;
				}
				else{
					myHP -= a->ad /2;
				}
			}
			return myHP <= 0;
		}
		bool simulateHurted(Monster *a){
			if (a->hp <= 0)
				return false;
			int myHP = hp;
			if (a->Sword != nullptr){
				myHP -= a->ad + a->Sword->damage;
			}
			else{
				myHP -= a->ad;
			}
			return myHP <= 0;
		}
};
class dragon : public Monster{
	public:
		void spawnMob(int total_mob, int gem, int pos)
		{
			isAlive = true;
			name = "dragon";
			colour = (!pos ? "red" : "blue");
			current_position = pos;
			id = total_mob;
			info = colour + " " + name + " " + to_string(id);
			hp = monster_hp[0];
			ad = monster_ad[0];
			morale = double(gem) / double(monster_hp[0]);
			total_weapon = 0;
			spawnWeapon(0, id % 3);
			total_weapon++;
		}
};
class ninja : public Monster{
	public:
		void spawnMob(int total_mob, int gem, int pos)
		{
			isAlive = true;
			total_weapon = 0;
			name = "ninja";
			colour = (!pos ? "red" : "blue");
			current_position = pos;
			id = total_mob;
			info = colour + " " + name + " " + to_string(id);
			hp = monster_hp[1];
			ad = monster_ad[1];
			spawnWeapon(0, id % 3);
			spawnWeapon(1, (id + 1) % 3);
			total_weapon += 2;
		}
};
class iceman : public Monster{
	public:
		void spawnMob(int total_mob, int gem, int pos)
		{
			isAlive = true;
			name = "iceman";
			colour = (!pos ? "red" : "blue");
			current_position = pos;
			id = total_mob;
			info = colour + " " + name + " " + to_string(id);
			hp = monster_hp[2];
			ad = monster_ad[2];
			step = 0;
			total_weapon = 0;
			spawnWeapon(0, id % 3);
			total_weapon++;
		}
};
class lion : public Monster{
	public:
		void spawnMob(int total_mob, int gem, int pos)
		{
			isAlive = true;
			name = "lion";
			colour = (!pos ? "red" : "blue");
			current_position = pos;
			id = total_mob;
			info = colour + " " + name + " " + to_string(id);
			ad = monster_ad[3];
			hp = monster_hp[3];
			loyalty = gem;
			total_weapon = 0;
		}
};
class wolf : public Monster{
	public:
		void spawnMob(int total_mob, int gem, int pos)
		{
			isAlive = true;
			name = "wolf";
			colour = (!pos ? "red" : "blue");
			current_position = pos;
			id = total_mob;
			info = colour + " " + name + " " + to_string(id);
			hp = monster_hp[4];
			ad = monster_ad[4];
			total_weapon = 0;
		}
		
		void printEscape(){};
		void printYell(){};	
};

//***City Class***//
class City{
	public:
		int id;
		string name;
		int flag; // -1:Red, 0:None, 1:Blue
		int fightStat; //-2:Red wins twice, 0:Reset, 2:Blue wins twice
		int gem;
		Monster *red;
		Monster *blue;

		//***Headquarter***///
		int monster_order[5];
		int each_monster_amount[5];
		int total_monster_amount;
		int current_monster_type;
		Monster *monster_team[5000];

		City(){}
		void setInfo(int a){
			id = a;
			name = "city " + char('0' + a);
			blue = nullptr;
			red = nullptr;
			gem = 0;
			flag = 0;
			fightStat = 0;
		}

		//***Headquarter***///
		void setRed(int m){
			id = 0;
			name = "red headquarter";
			memcpy(monster_order, monster_red_order, sizeof(monster_order));
			memset(each_monster_amount, 0, sizeof(each_monster_amount));
			total_monster_amount = 0;
			current_monster_type = 0;
			gem = m;
		}
		void setBlue(int m){
			id = N + 1;
			name = "blue headquarter";
			memcpy(monster_order, monster_blue_order, sizeof(monster_order));
			memset(each_monster_amount, 0, sizeof(each_monster_amount));
			total_monster_amount = 0;
			current_monster_type = 0;
			gem = m;
		}
		void checkDeath(){
			for (int i = 1; i <= total_monster_amount; i++){
				if (monster_team[i] == nullptr)
					continue;
				if (monster_team[i]->hp <= 0){
					monster_team[i] = nullptr;
				}
			}
		}
		void printGem(){
			printTime();
			cout << gem << " elements in " << name << endl;
		}
		void spawnMonster(){
			if (gem < monster_hp[monster_order[current_monster_type]]){
				return;
			}
			else{
				gem -= monster_hp[monster_order[current_monster_type]];
				total_monster_amount++;
				switch (monster_order[current_monster_type]){
					case 0:
						monster_team[total_monster_amount] = new dragon();
						break;
					case 1:
						monster_team[total_monster_amount] = new ninja();
						break;
					case 2:
						monster_team[total_monster_amount] = new iceman();
						break;
					case 3:
						monster_team[total_monster_amount] = new lion();
						break;
					case 4:
						monster_team[total_monster_amount] = new wolf();
						break;
				}
				monster_team[total_monster_amount]->spawnMob(total_monster_amount, gem, id);
				monster_team[total_monster_amount]->printSpawn();
				if (name == "red headquarter")
					red = monster_team[total_monster_amount];
				else if (name == "blue headquarter")
					blue = monster_team[total_monster_amount];
				current_monster_type++;
				if (current_monster_type == 5)
					current_monster_type = 0;
			}
		}
		void checkEscape(){
			for (int i = 1; i <= total_monster_amount; i++)
			{
				if (monster_team[i] == nullptr)
					continue;
				if (monster_team[i]->name == "lion" && monster_team[i]->loyalty <= 0)
				{
					monster_team[i]->escape();
					monster_team[i] = nullptr;
				}
			}
		}

		bool redAttackFirst(){ //if true then red attack first
			if (flag == -1)
				return true;
			else if (flag == 1)
				return false;
			else
				return id % 2 != 0;
		}
		void flagRaise(int a){
			fightStat = 0;
			flag = a;
			printTime();
			cout << (a == -1?"red":"blue") << " flag raised in city " << id << endl;
		}
};
City* city[30];
void checkPos(){
			for (int i = 0; i <= N + 1; i++){
				city[i]->red = nullptr;
				city[i]->blue = nullptr;
			}
			for (int i = 1; i <= city[0]->total_monster_amount; i++)
			{
				if (city[0]->monster_team[i] == nullptr){
					continue;
				}
				if (city[0]->name == "red headquarter")
					city[city[0]->monster_team[i]->current_position]->red = city[0]->monster_team[i];
				else if (city[0]->name == "blue headquarter")
					city[city[0]->monster_team[i]->current_position]->blue = city[0]->monster_team[i];
			}
			for (int i = 1; i <= city[N+1]->total_monster_amount; i++)
			{
				if (city[N+1]->monster_team[i] == nullptr)
					continue;
				if (city[N+1]->name == "red headquarter")
					city[city[N+1]->monster_team[i]->current_position]->red = city[N+1]->monster_team[i];
				else if (city[N+1]->name == "blue headquarter")
					city[city[N+1]->monster_team[i]->current_position]->blue = city[N+1]->monster_team[i];
			}
}
int main()
{
	int total;
	cin >> total;
	for (int i = 0; i < total; i++){
		cout << "Case " << i + 1 << ":" << endl;
		//***Initialization***//
		t = 0;
		blueTaken = false, redTaken = false;
		blueReach = false, redReach = false;
		City* red, *blue;
		int m, T;
		cin >> m >> N >> arrowDamage >> lionDecrease >> T;
		for (int j = 0; j <= N+1; j++){
			city[j] = new City;
			city[j]->setInfo(j);
		}
		red = city[0], blue = city[N+1];
		red->setRed(m), blue->setBlue(m);
		for (int j = 0; j < 5; j++)
			cin >> monster_hp[j];
		for (int j = 0; j < 5; j++)
			cin >> monster_ad[j];

		//***World runs***//
		while (t <= T){
			if(redTaken || blueTaken)break;
			int remain = t % 60;
			if(remain != 39 && remain != 40)checkPos();
			//***Events****//
			if (remain == 0){ //Spawn monsters
				red->spawnMonster(),blue->spawnMonster();
			}	

			else if (remain == 5){ //Lions escape
				red->checkEscape(),blue->checkEscape();
			}

			else if (remain == 10){ //March
				for (int j = 0; j <= N; j++){
					if (city[j+1]->blue != nullptr)
						city[j+1]->blue->moveForward();
					if (city[j]->red != nullptr)
						city[j]->red->moveForward();
				}
			} 

			else if (remain == 20){ //Generate gems
				for (int j = 1; j <= N; j++)
					city[j]->gem += 10;
			}

			else if (remain == 30){ //Take gems
				for (int j = 1; j <= N; j++)
				{
					if (city[j]->red == nullptr && city[j]->blue == nullptr)
						continue;
					if (city[j]->blue == nullptr){
						printTime();
						cout << city[j]->red->info << " earned " << city[j]->gem << " elements for his headquarter" << endl;
						red->gem += city[j]->gem;
						city[j]->gem = 0;
					}
					else if (city[j]->red == nullptr){
						printTime();
						cout << city[j]->blue->info << " earned " << city[j]->gem << " elements for his headquarter" << endl;
						blue->gem += city[j]->gem;
						city[j]->gem = 0;
					}
				}
			}
			
			else if (remain == 35){ //Arrrow atack
				for (int j = 0; j <= N+1; j++){
					if (j != N+1 && city[j]->red != nullptr && city[j]->red->Arrow != nullptr && city[j + 1]->blue != nullptr){
						city[j]->red->attackArrow(city[j + 1]->blue);
					}

					if (j != 0 && city[j]->blue != nullptr && city[j]->blue->Arrow != nullptr && city[j - 1]->red != nullptr)
					{
						city[j]->blue->attackArrow(city[j - 1]->red);
					}
				}
			}

			else if (remain == 38){ //Bomb attack
				for (int j = 1; j <= N; j++){
					if (city[j]->blue != nullptr && city[j]->red != nullptr && city[j]->blue->hp > 0 && city[j]->red->hp > 0){
						bool redDie = false;
						bool blueDie = false;
						if(city[j]->redAttackFirst()){
							redDie = city[j]->red->simulateAttack(city[j]->blue);
							blueDie = city[j]->blue->simulateHurted(city[j]->red);
						}
						else{
							redDie = city[j]->red->simulateHurted(city[j]->blue);
							blueDie = city[j]->blue->simulateAttack(city[j]->red);
						}
						if(redDie && city[j]->red->Bomb != nullptr){
							city[j]->red->attackBomb(city[j]->blue);
							city[j]->red = nullptr;
							city[j]->blue = nullptr;
						}
						if(blueDie && city[j]->blue->Bomb != nullptr){
							city[j]->blue->attackBomb(city[j]->red);
							city[j]->red = nullptr;
							city[j]->blue = nullptr;
						}
					}
				}		
			}

			else if (remain == 40){
				int redClaim = 0;
				int blueClaim = 0;
				for (int j = 1; j <= N; j++){
					if(city[j]->red != nullptr && city[j]->blue != nullptr){
						if(city[j]->red->hp >0 && city[j]->blue->hp > 0){ //Fight Occured
							int redHP = city[j]->red->hp;
							int blueHP = city[j]->blue->hp;
							if(city[j]->redAttackFirst()){
								city[j]->red->attackSword(city[j]->blue);
							}
							else{
								city[j]->blue->attackSword(city[j]->red);
							}
							if (city[j]->red->hp <= 0){
								city[j]->red->printDeath();
								if(city[j]->red->name == "lion")
									city[j]->blue->hp += redHP;
							}
							if (city[j]->blue->hp <= 0){
								city[j]->blue->printDeath();
								if(city[j]->blue->name == "lion")
									city[j]->red->hp += blueHP;
							}
						}
						if (city[j]->red-> hp <= 0 && city[j]->blue->hp > 0){ //Blue Wins	
							if(city[j]->blue->name == "dragon" ){
								city[j]->blue->morale += 0.2;
								if(city[j]->blue->morale > 0.8 && !city[j]->redAttackFirst())
									city[j]->blue->yell();
							}
							else if(city[j]->blue->name == "wolf"){
								city[j]->blue->takeWeapon(city[j]->red);
							}
							if(blue->gem >= 8){
								city[j]->blue->hp+=8;
								blue->gem -=8;
							}
							else{
								city[j]->blue->hp+=blue->gem;
								blue->gem = 0;
							}
							printTime();
							cout << city[j]->blue->info << " earned " << city[j]->gem << " elements for his headquarter" << endl;
							blueClaim+=city[j]->gem;
							city[j]->gem = 0;
							city[j]->fightStat = (city[j]->fightStat >= 1?2:1);
						}
						if(city[j]->blue->hp <= 0 && city[j]->red->hp > 0){ //Red Wins
							if(city[j]->red->name == "dragon"){
								city[j]->red->morale += 0.2;
								if(city[j]->red->morale > 0.8 && city[j]->redAttackFirst())
									city[j]->red->yell();
							}
							else if(city[j]->red->name == "wolf"){
								city[j]->red->takeWeapon(city[j]->blue);
							}
							if(red->gem >= 8){
								city[j]->red->hp+=8;
								red->gem -=8;
							}
							else{
								city[j]->red->hp+=red->gem;
								red->gem = 0;
							}
							printTime();
							cout << city[j]->red->info << " earned " << city[j]->gem << " elements for his headquarter" << endl;
							redClaim+=city[j]->gem;
							city[j]->gem = 0;
							city[j]->fightStat = (city[j]->fightStat <= -1?-2:-1);
						}
						if(city[j]->red->hp > 0 && city[j]->blue->hp > 0){ //Draw
							if(city[j]->red->name == "lion")city[j]->red->loyalty -= lionDecrease;
							if(city[j]->blue->name == "lion")city[j]->blue->loyalty -= lionDecrease;
							if(city[j]->red->name == "dragon"){
								city[j]->red->morale -= 0.2;
								if(city[j]->red->morale > 0.8 && city[j]->redAttackFirst())
									city[j]->red->yell();
							}
							if(city[j]->blue->name == "dragon"){
								city[j]->blue->morale -= 0.2;
								if(city[j]->blue->morale > 0.8 && !city[j]->redAttackFirst())
									city[j]->blue->yell();
							}
							city[j]->fightStat = 0;
						}
						if(city[j]->fightStat == -2 && city[j]->flag != -1){ //Raise red flag
							city[j]->flagRaise(-1);
						}
						else if(city[j]->fightStat == 2 && city[j]->flag != 1){ //Raise blue flag
							city[j]->flagRaise(1);
						}
					}
				}
				red->gem += redClaim;
				blue->gem += blueClaim;
				red->checkDeath(),blue->checkDeath();
			}
			
			else if (remain == 50){ //Print gem status
				red->printGem();
				blue->printGem();
			}
			if (remain == 55){
				for (int j = city[0]->total_monster_amount; j >= 1; j--)
				{
					if(city[0]->monster_team[j] != nullptr)
						city[0]->monster_team[j]->printWeaponStat();
				}
				for (int j = 1; j <= city[N+1]->total_monster_amount; j++)
				{
					if(city[N+1]->monster_team[j] != nullptr)
						city[N+1]->monster_team[j]->printWeaponStat();
				}
			}

			t++;
		}
	}
}
